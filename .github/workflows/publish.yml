name: Build and Publish (Testing)

# on:
#   release:
#     types: [published]
#   workflow_dispatch:
#     inputs:
#       release_type:
#         description: 'Release Type'
#         required: true
#         default: 'draft'
#         type: choice
#         options:
#           - draft
#           - prerelease
#           - release

on:
  push:
    branches:
      - 'dev-*'

jobs:
  # npm-publish:
  #   name: Build and Publish to NPM
  #   runs-on: ubuntu-latest
    
  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v4
      
  #     - name: Setup Node.js
  #       uses: actions/setup-node@v4
  #       with:
  #         node-version: '22.13.1'
  #         cache: 'yarn'
  #         registry-url: 'https://registry.npmjs.org'
      
  #     - name: Install dependencies
  #       run: yarn install --frozen-lockfile
      
  #     - name: Publish to npm
  #       run: npm publish
  #       env:
  #         NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

  build-macos:
    name: Build macOS App
    runs-on: macos-latest
    # needs: npm-publish
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22.13.1'
          cache: 'yarn'
      
      - name: Install dependencies
        run: yarn install --frozen-lockfile
      
      - name: Setup code signing
        run: |
          echo "${{ secrets.CSC_CONTENT }}" | base64 --decode > certificate.p12
          export CSC_LINK="./certificate.p12"

      - name: Setup python distributable
        run: |
          yarn setup-python
      
      - name: Build macOS app
        run: yarn dist:mac
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          CSC_CONTENT: ${{ secrets.CSC_CONTENT }}
          CSC_KEY_PASSWORD: ${{ secrets.CSC_KEY_PASSWORD }}
          APPLE_ID: ${{ secrets.APPLE_ID }}
          APPLE_ID_PASSWORD: ${{ secrets.APPLE_ID_PASSWORD }}
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
          NOTARIZE: true
      
      - name: Upload macOS artifacts
        uses: actions/upload-artifact@v4
        with:
          name: macos-artifacts
          path: |
            dist/*.dmg
          retention-days: 5

  build-windows:
    name: Build Windows App
    runs-on: windows-latest
    # needs: npm-publish
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22.13.1'
          cache: 'yarn'
      
      - name: Install dependencies
        run: yarn install --frozen-lockfile
      
      - name: Setup code signing (Windows)
        shell: bash
        run: |
          echo "${{ secrets.CSC_CONTENT }}" | base64 -d > certificate.p12
          echo "CSC_LINK=./certificate.p12" >> $GITHUB_ENV
      
      - name: Build Windows app
        run: yarn dist:win
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          CSC_CONTENT: ${{ secrets.CSC_CONTENT }}
          CSC_KEY_PASSWORD: ${{ secrets.CSC_KEY_PASSWORD }}
      
      - name: Upload Windows artifacts
        uses: actions/upload-artifact@v4
        with:
          name: windows-artifacts
          path: |
            dist/*.exe
            dist/*.msi
          retention-days: 5

  build-linux:
    name: Build Linux App
    runs-on: ubuntu-latest
    # needs: npm-publish
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22.13.1'
          cache: 'yarn'
      
      - name: Install dependencies
        run: yarn install --frozen-lockfile
      
      - name: Build Linux app
        run: yarn dist:linux
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload Linux artifacts
        uses: actions/upload-artifact@v4
        with:
          name: linux-artifacts
          path: |
            dist/*.deb
            dist/*.AppImage
            dist/*.rpm
          retention-days: 5

  create-github-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [build-macos, build-windows, build-linux]
    if: github.event_name == 'workflow_dispatch'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts
      
      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            artifacts/macos-artifacts/*
            artifacts/windows-artifacts/*
            artifacts/linux-artifacts/*
          draft: ${{ github.event.inputs.release_type == 'draft' }}
          prerelease: ${{ github.event.inputs.release_type == 'prerelease' }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
