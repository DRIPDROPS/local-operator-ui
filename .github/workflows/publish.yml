name: Build and Publish

on:
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      release_type:
        description: 'Release Type'
        required: true
        default: 'draft'
        type: choice
        options:
          - draft
          - prerelease
          - release

permissions:
  contents: write

jobs:
  npm-publish:
    name: Build and Publish to NPM
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: '10'

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22.13.1'
          cache: 'pnpm'
          registry-url: 'https://registry.npmjs.org'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Check if version already published
        id: check_version
        run: |
          PKG_NAME=$(jq -r .name package.json)
          PKG_VERSION=$(jq -r .version package.json)
          echo "Package: $PKG_NAME, Version: $PKG_VERSION"
          if npm view "$PKG_NAME@$PKG_VERSION" > /dev/null 2>&1; then
            echo "Version $PKG_VERSION already published."
            echo "published=true" >> $GITHUB_OUTPUT
          else
            echo "Version $PKG_VERSION not published yet."
            echo "published=false" >> $GITHUB_OUTPUT
          fi

      - name: Publish to npm
        if: steps.check_version.outputs.published == 'false'
        run: npm publish
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

  build-macos:
    name: Build macOS App
    runs-on: macos-latest
    needs: npm-publish

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: '10'

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22.13.1'
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Setup code signing
        run: |
          echo "${{ secrets.CSC_CONTENT }}" | base64 --decode > certificate.p12
          security create-keychain -p "${{ secrets.KEYCHAIN_PASSWORD }}" build.keychain
          security default-keychain -s build.keychain
          security unlock-keychain -p "${{ secrets.KEYCHAIN_PASSWORD }}" build.keychain
          security import certificate.p12 -k build.keychain -P "${{ secrets.CSC_KEY_PASSWORD }}" -T /usr/bin/codesign
          security set-key-partition-list -S apple-tool:,apple:,codesign:,notarize: -s -k "${{ secrets.KEYCHAIN_PASSWORD }}" build.keychain

      - name: Setup python distributable
        run: |
          pnpm setup-python

      - name: Build macOS app
        run: pnpm dist:mac
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          CSC_LINK: ./certificate.p12
          CSC_KEYCHAIN: build.keychain
          CSC_KEY_PASSWORD: ${{ secrets.CSC_KEY_PASSWORD }}
          APPLE_ID: ${{ secrets.APPLE_ID }}
          APPLE_ID_PASSWORD: ${{ secrets.APPLE_ID_PASSWORD }}
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
          NOTARIZE: true
          VITE_GOOGLE_CLIENT_ID: ${{ secrets.GOOGLE_CLIENT_ID }}
          VITE_GOOGLE_CLIENT_SECRET: ${{ secrets.GOOGLE_CLIENT_SECRET }}
          VITE_MICROSOFT_CLIENT_ID: ${{ secrets.MICROSOFT_CLIENT_ID }}
          VITE_MICROSOFT_TENANT_ID: ${{ secrets.MICROSOFT_TENANT_ID }}

      - name: Upload macOS artifacts
        uses: actions/upload-artifact@v4
        with:
          name: macos-artifacts
          path: |
            dist/*.dmg
            dist/*.zip
            dist/latest*.yml
          retention-days: 5

  build-windows:
    name: Build Windows App
    runs-on: windows-latest
    needs: npm-publish

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: '10'

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22.13.1'
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Setup code signing (Windows)
        shell: bash
        run: |
          echo "${{ secrets.CSC_CONTENT }}" | base64 -d > certificate.p12

      - name: Build Windows app
        run: pnpm dist:win
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          CSC_LINK: ./certificate.p12
          CSC_KEY_PASSWORD: ${{ secrets.CSC_KEY_PASSWORD }}
          VITE_GOOGLE_CLIENT_ID: ${{ secrets.GOOGLE_CLIENT_ID }}
          VITE_GOOGLE_CLIENT_SECRET: ${{ secrets.GOOGLE_CLIENT_SECRET }}
          VITE_MICROSOFT_CLIENT_ID: ${{ secrets.MICROSOFT_CLIENT_ID }}
          VITE_MICROSOFT_TENANT_ID: ${{ secrets.MICROSOFT_TENANT_ID }}

      - name: Upload Windows artifacts
        uses: actions/upload-artifact@v4
        with:
          name: windows-artifacts
          path: |
            dist/*.exe
            dist/*.msi
            dist/latest*.yml
          retention-days: 5

  build-linux:
    name: Build Linux App
    runs-on: ubuntu-latest
    needs: npm-publish

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: '10'

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22.13.1'
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build Linux app
        run: pnpm dist:linux
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          VITE_GOOGLE_CLIENT_ID: ${{ secrets.GOOGLE_CLIENT_ID }}
          VITE_GOOGLE_CLIENT_SECRET: ${{ secrets.GOOGLE_CLIENT_SECRET }}
          VITE_MICROSOFT_CLIENT_ID: ${{ secrets.MICROSOFT_CLIENT_ID }}
          VITE_MICROSOFT_TENANT_ID: ${{ secrets.MICROSOFT_TENANT_ID }}

      - name: Upload Linux artifacts
        uses: actions/upload-artifact@v4
        with:
          name: linux-artifacts
          path: |
            dist/*.deb
            dist/*.AppImage
            dist/*.rpm
            dist/latest*.yml
          retention-days: 5

  attach-to-release:
    name: Attach Artifacts to Release
    runs-on: ubuntu-latest
    needs: [build-macos, build-windows, build-linux]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Set release type from event
        id: release_type
        run: |
          if [ "${{ github.event_name }}" == "release" ]; then
            if [ "${{ github.event.release.draft }}" == "true" ]; then
              echo "type=draft" >> $GITHUB_OUTPUT
            elif [ "${{ github.event.release.prerelease }}" == "true" ]; then
              echo "type=prerelease" >> $GITHUB_OUTPUT
            else
              echo "type=release" >> $GITHUB_OUTPUT
            fi
          else
            echo "type=${{ github.event.inputs.release_type }}" >> $GITHUB_OUTPUT
          fi

      - name: Attach artifacts to release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            artifacts/macos-artifacts/*
            artifacts/windows-artifacts/*
            artifacts/linux-artifacts/*
          draft: ${{ steps.release_type.outputs.type == 'draft' }}
          prerelease: ${{ steps.release_type.outputs.type == 'prerelease' }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
